/**
 * This file contains the Flow type definitions for ReComponent.
 *
 * @flow
 */

import * as React from "react";

declare opaque type UpdateType;

declare export function NoUpdate(): {| type: UpdateType |};
declare export function Update<S>(state: S): {| type: UpdateType, state: S |};
declare export function SideEffects<T>(
  sideEffects: (T) => mixed
): {| type: UpdateType, sideEffects: T => mixed |};
declare export function UpdateWithSideEffects<S, T>(
  state: S,
  sideEffects: (T) => mixed
): {| type: UpdateType, state: S, sideEffects: T => mixed |};

declare export class ReComponent<
  Props,
  State,
  Action: { +type: string }
> extends React.Component<Props, State> {
  initialState(props: Props): State;

  static reducer(
    action: Action,
    state: State
  ):
    | {| type: UpdateType |}
    | {| type: UpdateType, state: $Shape<State> |}
    | {| type: UpdateType, sideEffects: ($Subtype<this>) => mixed |}
    | {|
        type: UpdateType,
        state: $Shape<State>,
        sideEffects: ($Subtype<this>) => mixed
      |};

  send(action: Action): void;
  createSender<A: Action>(actionType: $ElementType<A, "type">): mixed => A;

  // This type is only used when initialState returns an Immutable.js data type.
  // Consider this API unstable.
  +immutableState: State;
}

declare export class RePureComponent<
  P,
  S,
  A: { +type: string }
> extends ReComponent<P, S, A> {}
